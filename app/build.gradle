plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
}
apply from: 'app-version.gradle'

jacoco {
    toolVersion = "0.8.7"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.arnab.weatherforecast"
        minSdk 25
        targetSdk 31

        versionName "${project.ext.version.major}.${project.ext.version.minor}.${project.ext.version.build}"
        versionCode project.ext.version.major * 1000000 + project.ext.version.minor * 1000 + project.ext.version.build


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion '1.5.21'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all {
            reports {
                junitXml.enabled = true
                html.enabled = true
            }
        }
    }
}

afterEvaluate {
    //assembleRelease.dependsOn testReleaseUnitTest
    assembleDebug.dependsOn testDebugUnitTest//, connectedAndroidTest
}

dependencies {

    // Android Core Dependency
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'

    // Compose
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation("io.coil-kt:coil-compose:1.4.0")                                 /* Download image */
    implementation project(path: ':repository')
    implementation project(path: ':network')
    // Compose Test Dependency
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    // GPS Location
    implementation 'com.google.android.gms:play-services-location:11.0.1'

    // Retrofit
    // TODO remove Retrofit dependency not in use. Remove deprecated methods in MainActivity
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // UnitTest/UITest Dependency
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

}

configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
    }

    def fileFilter = ['android/databinding/**/*.class',
                      '**/android/databinding/*Binding.class',
                      '**/android/databinding/*',
                      '**/androidx/databinding/*',
                      '**/BR.*',
                      '**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*Module_*Factory.class',
                      '**/di/module/*',
                      '**/*_Factory*.*',
                      '**/*Module*.*',
                      '**/*Dagger*.*',
                      '**/*Hilt*.*',
                      '**/*MapperImpl*.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/BuildConfig.*',
                      '**/*Component*.*',
                      '**/*BR*.*',
                      '**/Manifest*.*',
                      '**/*$Lambda$*.*',
                      '**/*Companion*.*',
                      '**/*Module*.*',
                      '**/*Dagger*.*',
                      '**/*Hilt*.*',
                      '**/*MembersInjector*.*',
                      '**/*_MembersInjector.class',
                      '**/*_Factory*.*',
                      '**/*_Provide*Factory*.*',
                      '**/*Extensions*.*',
                      '**/*$Result.*',
                      '**/*$Result$*.*']

    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = fileTree(dir: "${projectDir}/src/main/java", excludes: fileFilter)

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))

    //def unitTestsData = "$project.buildDir/jacoco/testDebugUnitTest.exec"
    def unitTestsData = "$project.buildDir/jacoco/testReleaseUnitTest.exec"
    def androidTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage/debugAndroidTest/connected/",
            includes: ["**/*.ec"])
    getExecutionData().setFrom(files([unitTestsData, androidTestsData]))

}